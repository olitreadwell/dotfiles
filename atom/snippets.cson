'.text.plain':
  'Email: Simple & Optimistic':
    'prefix': 'e-simple-optimistic'
    'body': """
    Hello {{first name}}!

    Glad to be in touch. How's it going? Hope you're having a fantastic day.

    It'd be awesome to talk further about this. I look forward to hearing back from you.

    Have a great rest of your day.

    Cheers,

    Oli
    """
'.source.gfm':
  'Question & Answer':
    'prefix': 'qa-cfu'
    'body': """
    * Q: $1
      * A: $2
    """
'.source.js':
  'knexDbEnvDefaultConfig':
    'prefix': 'knexDbEnvDefaultConfig'
    'body': """
      // Name of Application
      const appName = '$1';

      // Application Database Configuration Defaults
      const applicationDatabaseGenerics = {
        client: 'pg',
        migrations: __dirname + '/src/server/db/migrations',
        seeds: __dirname + '/src/server/db/seeds',
      }
    """
  'Const Require':
    'prefix': 'crq'
    'body': """
      // $1 module
      const $1 = require('$1');
    """
  'js test draft':
    'prefix': 'test'
    'body': """
    test('$1', () =>
    {
      expect($1)
        .to();
    })
    """
  'console.log':
    'prefix': 'log'
    'body': """
    console.log(`$1`, `${$2}`);
    """
  'knexDbEnv':
    'prefix': 'knexDbEnv'
    'body': """
    // '$1' Environment Knex DB Config
    $1:
    {
      client: applicationDatabaseGenerics.client,
      migrations:
      {
        directory: applicationDatabaseGenerics.migrations,
      },
      connection:
      {
        database: `${appName}-$1`,
      },
      seeds:
      {
        directory: applicationDatabaseGenerics.migrations + '/$1',
      },
    },
    """
  'Express Modules':
    'prefix': 'express-modules'
    'body': """
      // instantiate express app
      const express = require('express');
      const app = express();

      const path = require('path');
      const methodOverride = require('method-override');
      const morgan = require('morgan');
      const bodyParser = require('body-parser');
    """
  'Express Middleware':
    'prefix': 'express-middleware'
    'body': """
      // set view engine
      app.set('view engine', 'ejs');

      // set path for view files
      app.use(express.static(path.join(__dirname, '/views')));

      app.use(morgan('tiny'));
      app.use(bodyParser.urlencoded({
        extended: true,
      }));

      //Use URL parameter based override
      app.use(methodOverride('_method'));
    """
  'Gulp Task':
    'prefix': 'gulp-task'
    'body': """
      // Gulp Task Name
      gulp.task('$1', () => {
        //$1
        const $1;
      });
    """
  'Server Port Listen':
    'prefix': 'node-server-port-listen'
    'body': """
    const port = process.env.PORT || 3000

    // Server listen to Port
    app.listen(port, () => {
      console.log('listening on', port);
    });
    """

# '.text.html.basic'
# '.source.css'
# '.source.sass'
# '.text.html.php'
# '.source.java'
# '.text.html.erb'
# '.source.python'

# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
#
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
